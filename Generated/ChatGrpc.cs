// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: chat.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Com.Example.Grpc.Chat {
  public static partial class ChatService
  {
    static readonly string __ServiceName = "com.example.grpc.chat.ChatService";

    static readonly grpc::Marshaller<global::Com.Example.Grpc.Chat.ChatMessage> __Marshaller_com_example_grpc_chat_ChatMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Example.Grpc.Chat.ChatMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Example.Grpc.Chat.ChatMessageFromServer> __Marshaller_com_example_grpc_chat_ChatMessageFromServer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Example.Grpc.Chat.ChatMessageFromServer.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Proto.ConnectionStatus> __Marshaller_ConnectionStatus = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Proto.ConnectionStatus.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Example.Grpc.Chat.Empty> __Marshaller_com_example_grpc_chat_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Example.Grpc.Chat.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.Example.Grpc.Chat.ChatMessage, global::Com.Example.Grpc.Chat.ChatMessageFromServer> __Method_chat = new grpc::Method<global::Com.Example.Grpc.Chat.ChatMessage, global::Com.Example.Grpc.Chat.ChatMessageFromServer>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "chat",
        __Marshaller_com_example_grpc_chat_ChatMessage,
        __Marshaller_com_example_grpc_chat_ChatMessageFromServer);

    static readonly grpc::Method<global::Proto.ConnectionStatus, global::Com.Example.Grpc.Chat.Empty> __Method_onlineStatus = new grpc::Method<global::Proto.ConnectionStatus, global::Com.Example.Grpc.Chat.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "onlineStatus",
        __Marshaller_ConnectionStatus,
        __Marshaller_com_example_grpc_chat_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Example.Grpc.Chat.ChatReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ChatService</summary>
    [grpc::BindServiceMethod(typeof(ChatService), "BindService")]
    public abstract partial class ChatServiceBase
    {
      public virtual global::System.Threading.Tasks.Task chat(grpc::IAsyncStreamReader<global::Com.Example.Grpc.Chat.ChatMessage> requestStream, grpc::IServerStreamWriter<global::Com.Example.Grpc.Chat.ChatMessageFromServer> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Com.Example.Grpc.Chat.Empty> onlineStatus(global::Proto.ConnectionStatus request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChatService</summary>
    public partial class ChatServiceClient : grpc::ClientBase<ChatServiceClient>
    {
      /// <summary>Creates a new client for ChatService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChatServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChatService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChatServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChatServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChatServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::Com.Example.Grpc.Chat.ChatMessage, global::Com.Example.Grpc.Chat.ChatMessageFromServer> chat(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return chat(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Com.Example.Grpc.Chat.ChatMessage, global::Com.Example.Grpc.Chat.ChatMessageFromServer> chat(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_chat, null, options);
      }
      public virtual global::Com.Example.Grpc.Chat.Empty onlineStatus(global::Proto.ConnectionStatus request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return onlineStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Example.Grpc.Chat.Empty onlineStatus(global::Proto.ConnectionStatus request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_onlineStatus, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Com.Example.Grpc.Chat.Empty> onlineStatusAsync(global::Proto.ConnectionStatus request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return onlineStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Com.Example.Grpc.Chat.Empty> onlineStatusAsync(global::Proto.ConnectionStatus request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_onlineStatus, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChatServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChatServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChatServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_chat, serviceImpl.chat)
          .AddMethod(__Method_onlineStatus, serviceImpl.onlineStatus).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ChatServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_chat, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Com.Example.Grpc.Chat.ChatMessage, global::Com.Example.Grpc.Chat.ChatMessageFromServer>(serviceImpl.chat));
      serviceBinder.AddMethod(__Method_onlineStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Proto.ConnectionStatus, global::Com.Example.Grpc.Chat.Empty>(serviceImpl.onlineStatus));
    }

  }
}
#endregion
